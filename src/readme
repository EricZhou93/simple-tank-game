/*******************************************************************************
* Assignment 7
* Comp 86 Fall 2019 
*
* Author: Keren Zhou    Student ID: 1328495
*
* 2019-10-10 Created.
* 2019-11-1 Last modified.
*
* README
*******************************************************************************/

Acknowledgements:


Compile and Run:
    *** Strongly recommend to remove all the .class file before compiling. ***
    Compile: javac Main.java
    Run: java Main


Brief Description of My Plan and Design:
    I want to build up a simple tank simulator similar to an old fashioned 
    Nintendo console game, Battle City 
    (https://en.wikipedia.org/wiki/Battle_City_(video_game) and
     https://oldgameshelf.com/battle-city-98.html). 
    In my game, player can control tanks eliminating all the enemy tanks in the 
    battlefield to win the game.
    In the center of the window, there is a canvas. It works as the graphical 
    display of the battlefield and the stage for player tank, enemy tanks and 
    landscape objects (rocks, trees and buildings).
    On the right side of the main window, there is the control panel. It 
    contains widgets to control the game, such as direction buttons and fire 
    buttons for the player tank and buttons to play and pause the game.
    At the bottom of the window, there is a information board as the text 
    display game information. It display game information such as the HP of 
    player tank and player's score in the game.


How to Play:
    In this game, players are supposed to control yellow player tanks to 
    eliminate gray enemy tanks. Because enemy tanks are automatically and 
    continuously added into the battlefield, players are supposed to try their 
    best to kill as many as they can.

    To select a tank, player can use mouse to click on a yellow player tank. 
    The selected tank is highlighted (surrounded by a green rectangles).

    To control the selected tank, player can press "w", "a", "s" and "d" to 
    move the tank and press space to let it fire.
    Player can also press direction buttons in the vehicle control to move the tank and press the fire button to let it fire.

    Tanks can be blocked by other tanks and rocks (light grey rectangles on the 
    map).

    A shell (a small, red circle) fired by player tanks can be blocked by an 
    enemy tank or a rock but can pass through a player tank. Thus, players do 
    not have to worry about friendly fire.

    If an enemy tank is hit by player's shell, the enemy tank will be 
    destroyed. This adds one to the player kills and minus one to the enemy 
    left on the information board at the bottom of the window.

    There are 2 kinds of tanks, light and heavy. Light tanks moves faster and 
    look slimmer than heavy tanks.


Other features:
    There are other control widgets in the control panel on the right side 
    of the main window.

    Background color combo box can set the canvas background color.

    Zoom control shows the current zoom scale. It can zoom in or out the map. 

    Animation control has a play and a pause button to start and stop auto 
    movements (animation) of enemy tanks.

    Vehicle adding panel has 2 text fields to input the starting position of 
    the new vehicle. And tank category buttons decide which kind of tanks will 
    be added to the battlefield.

    When adjusting the size of the main window, if the window is too small, the information board and the background color panel will be hidden.


Files:
* Main.java: 
    It contains main method, the entrance of the program.
    Main class is designed for the main window of this program.

* Model.java:
    Model class is designed as the shared database and the background 
    
    administrator.
    It maintains the drawing routines, animation and collision mechanisms of 
    all objects showed on the canvas.

* Canvas.java:
    Model class is designed as the graphical display of this program.

* GridBagPanel.java:
    Base class for all panels using grid bag layout.
    It has a method to reset a gird bag constrain facilitating reusing of grid 
    bag constrains.

* ControlPanel.java:
    A panel contains all other specific control panels.

* BackgroundColorPanel.java: 
    It contains a BackgroundColorComboBox to change the background color of the 
    canvas.

* BackgroundColorComboBox.java: 
    It calls the model to call the canvas to change its background color.

* AnimationControlPanel.java: 
    It contains a play and a pause button to activate and deactivate enemy 
    vehicles on the battlefield, i.e. start and pause the animation of enemy 
    vehicles.

* VehicleControlPanel.java:
    It contains directions buttons to move the selected vehicle and a fire 
    button to let it fire.

* InfoPanel.java: 
    It contains a information board and 2 labels showing how many enemies left 
    and how many enemies play killed.

* Button.java: 
    Base class for all buttons.
    When a Button object is pressed, a pressed message will be printed in the 
    console.

* DirectionButton.java: 
    Buttons call model to move the selected vehicle.

* AddVehicleButton.java: 
    A button call model to add a vehicle of a given type at a given position.
    It gets the given position from 2 text fields.

* AddEnemyHeavyTankButton.java: 
    A button call model to add a enemy heavy tank at a given position.

* AddEnemyLightTankButton.java: 
    A button call model to add a enemy light tank at a given position.

* AddPlayerLightTankButton.java: 
    A button call model to add a player light tank at a given position.

* AddPlayerHeavyTankButton.java: 
    A button call model to add a player heavy tank at a given position.

* PlayButton.java: 
    A button calls model to activate the animation of enemy vehicles.
    It also disables itself and enables the pause button.

* PauseButton.java: 
    A button calls model to deactivate the animation of enemy vehicles.
    It also disables itself and enables the play button.

* Object.java:
    Base class for all objects showed on the canvas (battlefield).

* Vehicle.java: 
    Base class for all vehicles.
    It contains basic properties such as center coordinates, unit size, 
    direction, collision boundary and so on.

* Tank.java
    Base class for all tanks.
    It contains special shapes for tanks, such as a hull, a turret, tracks and 
    an artillery.

* LightTank.java:
    A base class designed for light tanks.
    It has its special shapes.

* PlayerLightTank.java: 
    A class designed for player light tanks.
    It has special id notation for player vehicles.
    Its fill color is set to yellow.

* EnemyLightTank.java: 
    A class designed for enemy light tanks.
    It has special id notation for enemy vehicles.
    It has animation routines.
    Its fill color is set to grey.

* HeavyTank.java:
    A base class designed for heavy tanks.
    It has its special shapes.

* PlayerHeavyTank.java: 
    A class designed for player heavy tanks.
    It has special id notation for player vehicles.
    Its fill color is set to yellow.

* EnemyHeavyTank.java: 
    A class designed for enemy heavy tanks.
    It has special id notation for enemy vehicles.
    It has animation routines.
    Its fill color is set to grey.

* Rock.java:
    A class designed for a kind of landscape objects, rocks.
    It blocks all the vehicles and shells (bullets).

* TextField.java: 
    A JTextField subclass for inputting initial coordinates of vehicles.

* Shell.java
    A class designed for shells (bullets) fired by tanks.
    A shell fired by a player tank pass through player tanks. Thus, no need to 
    worry about friendly fire.
    If a shell hits an enemy vehicle, the shell and the enemy vehicle will be 
    destroyed.
    If a shell hits a rock, the shell will be destroyed.


Inheritance Hierarchy:
JFrame
    Main
Model
JPanel
    Canvas
    GridBagPanel
        ControlPanel
        InfoPanel
        BackgroundColorPanel
        ZoomPanel
        AnimationControlPanel
        VehicleAddingPanel
        VehicleControlPanel
JButton
    Button
        DirectionButton
        FireButton
        AddVehicleButton
            AddEnemyHeavyTankButton
            AddEnemyLightTankButton
            AddPlayerHeavyTankButton
            AddPlayerLightTankButton
        PlayButton
        PauseButton
JComboBox
    BackgroundColorComboBox
JTextField
    TextField
Object
    Vehicle
        Tank
            LightTank
                PlayerLightTank
                EnemyLightTank
            HeavyTank
                PlayerHeavyTank
                EnemyHeavyTank
    Rock
    Shell


Aggregation Hierarchy:
Main
    Model model
        ArrayList <Vehicle> playerVehicleArrayList
            PlayerLightTank(s)
            PlayerHeavyTank(s)
        ArrayList <Vehicle> enemyVehicleArrayList
            EnemyLightTank(s)
            EnemyHeavyTank(s)
        ArrayList <Object> landscapeObjectArrayList
            Rock(s)
        ArrayList<Shell> shellArrayList
            Shell(s)
    Canvas canvas
    ControlPanel controlPanel
        BackgroundColorPanel backgroundColorPanel
            BackgroundColorComboBox backgroundColorComboBox
        AnimationControlPanel animationControlPanel
            PlayButton playButton
            PauseButton pauseButton
        ZoomPanel zoomPanel
            Button zoomInButton
            Button zoomOutButton
            JLabel zoomScaleLabel
        VehicleAddingPanel vehicleAddingPanel
            AddEnemyLightTankButton addEnemyLightTankButton
            AddEnemyHeavyTankButton addEnemyHeavyTankButton
            AddPlayerLightTankButton addPlayerLightTankButton
            AddPlayerHeavyTankButton addPlayerHeavyTankButton
            JTextField posXTextField
            JTextField posYTextField
        VehicleControlPanel vehicleControlPanel
            DirectionButton upButton
            DirectionButton downButton
            DirectionButton leftButton
            DirectionButton rightButton
            FireButton fireButton
     InfoPanel infoPanel
        JTextArea infoBoard
        JScrollPane scrollbar
        JLabel playerKillsLabel
        JLabel enemyLeftLabel

Uses ("Collaboration") Hierarchy
Main
    Calls ControlPanel to hide or show BackgroundColorPanel.
    Calls InfoPanel to hide or show JTextArea infoBoard.
    Calls Model to move or fire the controlled player tank.
Model
    Calls Vehicle(s), (Landscape)Object(s) and Shell(s) to draw themselves.
    Calls Canvas to redraw or change background color.
    Calls Canvas to return its width and height.
    Calls InfoPanel to update JLabel playerKillsLabel and enemyLeftLabel.
Canvas
    Calls Model to draw Objects (vehicles, landscape objects and shells).
    Calls Model to set the selected Vehicle according to the mouse click.
BackgroundColorComboBox
    Calls Model to call Canvas to change the background color.
PlayButton
    Calls Model to activate enemy Vehicle(s).
    Calls PauseButton to set itself enable.
PauseButton
    Calls Model to deactivate enemy Vehicle(s).
    Calls PlayButton to set itself enable.
ZoomPanel
    Calls Model to change the zoom scale (zoom in or out).
AddXXXTankButton
    Calls Model to add a tank of the given type to corresponding array 
    list.
DirectionButton
    Calls Model to move the selected Vehicle.
FireButton
    Calls Model to fire a Shell from the selected Vehicle.